{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenAPI Plant Store",
    "description": "A sample API that uses a plant store as an example to demonstrate features in the OpenAPI specification",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.aethos.network"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/": {
      "post": {
        "description": "Accepts a transaction object and returns a response",
        "requestBody": {
          "description": "Ethereum transaction object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Transaction"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Transaction"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Transaction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request format is invalid or missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "missing_fields": {
                    "summary": "Missing required fields",
                    "value": {
                      "error": 400,
                      "message": "Missing required field: from"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: The request lacks proper authentication credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "invalid_token": {
                    "summary": "Missing or invalid token",
                    "value": {
                      "error": 401,
                      "message": "Missing or invalid token"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: The client does not have permission to access the requested resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "insufficient_permissions": {
                    "summary": "Insufficient permissions",
                    "value": {
                      "error": 403,
                      "message": "Insufficient permissions"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The requested resource could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "not_found": {
                    "summary": "Resource not found",
                    "value": {
                      "error": 404,
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout: The request took too long to process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "timeout": {
                    "summary": "Request timeout",
                    "value": {
                      "error": 408,
                      "message": "Request timeout"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests: The client has sent too many requests in a given amount of time",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "rate_limit_exceeded": {
                    "summary": "Rate limit exceeded",
                    "value": {
                      "error": 429,
                      "message": "Rate limit exceeded"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: An error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "internal_error": {
                    "summary": "Internal server error",
                    "value": {
                      "error": 500,
                      "message": "Internal server error"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable: The service is temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "service_unavailable": {
                    "summary": "Service unavailable",
                    "value": {
                      "error": 503,
                      "message": "Service unavailable"
                    }
                  }
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout: The server is acting as a gateway and did not receive a timely response from the upstream server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "gateway_timeout": {
                    "summary": "Gateway timeout",
                    "value": {
                      "error": 504,
                      "message": "Gateway timeout"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Transaction": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "example": "0x1234567890123456789012345678901234567890"
          },
          "to": {
            "type": "string",
            "example": "0x1234567890123456789012345678901234567890"
          },
          "gas": {
            "type": "string",
            "example": "21000"
          },
          "gasPrice": {
            "type": "string",
            "example": "20000000000"
          },
          "value": {
            "type": "string",
            "example": "1000000000000000000"
          },
          "nonce": {
            "type": "string",
            "example": "0"
          },
          "data": {
            "type": "string",
            "example": "0x"
          }
        }
      },
      "TransactionResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success"
          },
          "AethosParams": {
            "type": "string",
            "example": "todo add example of encoded params"
          }
        }
      },
      "Error": {
        "required": [
          "error",
          "message"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}